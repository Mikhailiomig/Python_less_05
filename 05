# # Вычислить число c заданной точностью d

# # Первый вариант

a = float (input ('Введите число: '))
d = int (input ('Сколько знаков после запятой оставить:'))
print(round(a, d))

# Второй вариант

a = float (input ('Введите число: '))
d = float (input ('Задайте точность:'))  #Например: 0.001
len_d = len(str(d).split('.')[1])
print(round(a, len_d))





# # # Задайте натуральное число N. Напишите программу, которая составит список простых множителей числа N.

a = int (input ('Введите натуральное число: '))
i = 2
list_a = []
while a != 1:
    if a % i == 0:
        list_a.append (i)
        a = a // i
    else:
        i += 1
print ('Список простых множителей числа N: ')        
print (list_a)





# # # Задайте последовательность чисел. Напишите программу, которая выведет список неповторяющихся 
# # # элементов исходной последовательности.

a = list(map(int, input('Введите значения: ').split()))
print(f'Вот наш список: {a}')
nuw_a = []
for i in a:
    if i not in nuw_a:
        nuw_a.append(i)
print ('Ваш список: ')
print (nuw_a)





# # Задана натуральная степень k. Сформировать случайным образом список коэффициентов (значения от 0 до 100) 
# # многочлена и записать в файл многочлен степени k.

from random import randint
k = int (input('Задайте степень многочлена: '))
i = k
list_a = []
while k >= i >= 0:
    if i == 0:
        a = randint(0, 100)
        b = (f'{a}')
        list_a.append (b)
    elif i == 1: 
        a = randint(0, 100)
        b = (f'{a}x +')
        list_a.append (b)
    elif i <= k: 
        a = randint(0, 100)
        b = (f'{a}x**{i} +')
        list_a.append (b)
    i -= 1
print (*list_a, '= 0')        






# # Даны два файла, в каждом из которых находится запись многочлена. 
# # Задача - сформировать файл, содержащий сумму многочленов.


def remake (equation):                                                # Создание словаря из выражения из файла
    dectEquation = {}
    equation = equation.replace (' - ', ' -').replace (' + ', ' +')   # Очищаем список от лишних элементов
    equation = equation.split ()
    equation = equation [:-2]
    for i in range (len (equation)):
        equation[i] = equation[i].replace ('+', '').split ('x**')     # Очищаем список от лишних элементов
        dectEquation [int (equation[i][1])] = int (equation[i][0])    # Запись словаря
    return dectEquation

def sumEquation (dict1, dict2):        # "Выравнивание" количества элементов в многочленах
    dictFinal = {}
    maximum = (max (max(dict1), max(dict2)))
    for i in range (maximum, -1, -1):
        first = dict1.get(i)             # Замена несуществующих степеней выражением None 
        second = dict2.get(i)
        if first != None or second != None:
            dictFinal[i] = (first if first != None else 0) + (second if second != None else 0)
    return dictFinal

def cefResult (dictFinal):
    result = ''
    for i in dictFinal.items ():
        if result == '':
            if i[1] < 0:
                result += ' - ' + str (abs (i[1])) + 'x**' + str (abs (i[0]))
            elif i[1] > 0:
                result += str (abs (i[1])) + 'x**' + str (abs (i[0]))
        else:
            if i[1] < 0:
                result += ' - ' + str (abs (i[1])) + 'x**' + str (abs (i[0]))
            elif i[1] > 0:
                result += ' + ' + str (abs (i[1])) + 'x**' + str (abs (i[0]))
        result = result.replace ('x**1', 'x').replace('x**0', '').replace('1x', 'x')
    return result + ' =  0'

with open ('file1.txt', 'r') as text:
    equation = text.readline()
with open ('file2.txt', 'r') as text:
    equation2 = text.readline() 

dectEquation = remake (equation)
dectEquation2 = remake (equation2)

dictFinal = sumEquation (dectEquation, dectEquation2)

dictFinal = cefResult (dictFinal)
print (dictFinal)

with open ('file3.txt', 'w') as text:
    text.writelines(dictFinal)
